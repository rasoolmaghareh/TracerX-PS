type curb = { curb_0,curb_1,curb_2,curb_3,curb_4 };
type car = { car_0,car_1,car_2,car_3,car_4,car_5 };

decl at_curb[car] : bool;
decl carat[car] : curb U car;
decl car_clear[car] : bool;
decl curb_clear[curb] : bool;
decl step : real;

initial
step := 0;curb_clear(curb_4) := 1;
car_clear(car_1) := 1;
carat(car_1) := curb_3;
at_curb(car_1) := 1;
car_clear(car_3) := 1;
carat(car_3) := curb_2;
at_curb(car_3) := 1;
car_clear(car_0) := 1;
carat(car_0) := car_2;
carat(car_2) := curb_1;
at_curb(car_2) := 1;
car_clear(car_4) := 1;
carat(car_4) := car_5;
carat(car_5) := curb_0;
at_curb(car_5) := 1;

goal (step < 8 & (carat(car_0)) = (curb_0) & (carat(car_5)) = (car_0) & (carat(car_1)) = (curb_1) & (carat(car_2)) = (curb_2) & (carat(car_3)) = (curb_3) & (carat(car_4)) = (curb_4));

action move_curb_to_curb(car : car,curbsrc : curb,curbdest : curb)
(not curbsrc = curbdest & car_clear(car) = 1 & curb_clear(curbdest) = 1 & carat(car) = curbsrc)
=>
step := step + 1;
curb_clear(curbdest) := 0;
curb_clear(curbsrc) := 1;
carat(car) := curbdest;


action move_curb_to_car(car : car,curbsrc : curb,cardest : car)
(not car = cardest & car_clear(car) = 1 & car_clear(cardest) = 1 & carat(car) = curbsrc & at_curb(cardest) = 1)
=>
step := step + 1;
car_clear(cardest) := 0;
at_curb(car) := 0;
curb_clear(curbsrc) := 1;
carat(car) := cardest;


action move_car_to_curb(car : car,carsrc : car,curbdest : curb)
(not carsrc = car & car_clear(car) = 1 & curb_clear(curbdest) = 1 & carat(car) = carsrc)
=>
step := step + 1;
curb_clear(curbdest) := 0;
car_clear(carsrc) := 1;
carat(car) := curbdest;
at_curb(car) := 1;


action move_car_to_car(car : car,carsrc : car,cardest : car)
(not carsrc = cardest & not car = cardest & not car = carsrc & car_clear(car) = 1 & car_clear(cardest) = 1 & carat(car) = carsrc & at_curb(cardest) = 1)
=>
step := step + 1;
car_clear(cardest) := 0;
car_clear(carsrc) := 1;
carat(car) := cardest;
