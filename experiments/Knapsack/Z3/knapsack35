;(set-logic QF_AUFBV)
(set-info :smt-lib-version 2.0)
(declare-fun b1 () Bool)
(declare-fun b2 () Bool)
(declare-fun b3 () Bool)
(declare-fun b4 () Bool)
(declare-fun b5 () Bool)
(declare-fun b6 () Bool)
(declare-fun b7 () Bool)
(declare-fun b8 () Bool)
(declare-fun b9 () Bool)
(declare-fun b10 () Bool)
(declare-fun b11 () Bool)
(declare-fun b12 () Bool)
(declare-fun b13 () Bool)
(declare-fun b14 () Bool)
(declare-fun b15 () Bool)
(declare-fun b16 () Bool)
(declare-fun b17 () Bool)
(declare-fun b18 () Bool)
(declare-fun b19 () Bool)
(declare-fun b20 () Bool)
(declare-fun b21 () Bool)
(declare-fun b22 () Bool)
(declare-fun b23 () Bool)
(declare-fun b24 () Bool)
(declare-fun b25 () Bool)
(declare-fun b26 () Bool)
(declare-fun b27 () Bool)
(declare-fun b28 () Bool)
(declare-fun b29 () Bool)
(declare-fun b30 () Bool)
(declare-fun b31 () Bool)
(declare-fun b32 () Bool)
(declare-fun b33 () Bool)
(declare-fun b34 () Bool)
(declare-fun b35 () Bool)
(declare-fun b36 () Bool)
(declare-fun b37 () Bool)
(declare-fun b38 () Bool)
(declare-fun b39 () Bool)
(declare-fun b40 () Bool)
(declare-fun b41 () Bool)
(declare-fun b42 () Bool)
(declare-fun b43 () Bool)
(declare-fun b44 () Bool)
(declare-fun b45 () Bool)
(declare-fun b46 () Bool)
(declare-fun b47 () Bool)
(declare-fun b48 () Bool)
(declare-fun b49 () Bool)
(declare-fun b50 () Bool)

(assert
(let ((?x0 (_ bv0 32)))
(let ((?x1 (_ bv7120 32)))
(let ((?x2 (_ bv4760 32)))
(let ((?x3 (_ bv8110 32)))
(let ((?x4 (_ bv30025 32)))
(let ((?x5 (_ bv18980 32)))
(let ((?x6 (_ bv4190 32)))
(let ((?x7 (_ bv13765 32)))
(let ((?x8 (_ bv26145 32)))
(let ((?x9 (_ bv6560 32)))
(let ((?x10 (_ bv18850 32)))
(let ((?x11 (_ bv30620 32)))
(let ((?x12 (_ bv11200 32)))
(let ((?x13 (_ bv5910 32)))
(let ((?x14 (_ bv30605 32)))
(let ((?x15 (_ bv22390 32)))
(let ((?x16 (_ bv73320 32)))
(let ((?x17 (_ bv7220 32)))
(let ((?x18 (_ bv11945 32)))
(let ((?x19 (_ bv11075 32)))
(let ((?x20 (_ bv12415 32)))
(let ((?x21 (_ bv7125 32)))
(let ((?x22 (_ bv4765 32)))
(let ((?x23 (_ bv8115 32)))
(let ((?x24 (_ bv30025 32)))
(let ((?x25 (_ bv18980 32)))
(let ((?x26 (_ bv4195 32)))
(let ((?x27 (_ bv13765 32)))
(let ((?x28 (_ bv26145 32)))
(let ((?x29 (_ bv6560 32)))
(let ((?x30 (_ bv18850 32)))
(let ((?x31 (_ bv30620 32)))
(let ((?x32 (_ bv11205 32)))
(let ((?x33 (_ bv5915 32)))
(let ((?x34 (_ bv30600 32)))
(let ((?x35 (_ bv22390 32)))
(let ((?x36 (_ bv60 32)))
(let ((?x37 (_ bv105 32)))
(let ((?x38 (_ bv80 32)))
(let ((?x39 (_ bv75 32)))
(let ((?x40 (_ bv125 32)))
(let ((?x41 (_ bv45 32)))
(let ((?x42 (_ bv65 32)))
(let ((?x43 (_ bv110 32)))
(let ((?x44 (_ bv95 32)))
(let ((?x45 (_ bv115 32)))
(let ((?x46 (_ bv45 32)))
(let ((?x47 (_ bv65 32)))
(let ((?x48 (_ bv110 32)))
(let ((?x49 (_ bv95 32)))
(let ((?x50 (_ bv45 32)))
(let ((?s1 (ite b1 ?x1 ?x0)))
(let ((?s2 (ite b2 (bvadd ?s1 ?x2) (bvadd ?s1 ?x0))))
(let ((?s3 (ite b3 (bvadd ?s2 ?x3) (bvadd ?s2 ?x0))))
(let ((?s4 (ite b4 (bvadd ?s3 ?x4) (bvadd ?s3 ?x0))))
(let ((?s5 (ite b5 (bvadd ?s4 ?x5) (bvadd ?s4 ?x0))))
(let ((?s6 (ite b6 (bvadd ?s5 ?x6) (bvadd ?s5 ?x0))))
(let ((?s7 (ite b7 (bvadd ?s6 ?x7) (bvadd ?s6 ?x0))))
(let ((?s8 (ite b8 (bvadd ?s7 ?x8) (bvadd ?s7 ?x0))))
(let ((?s9 (ite b9 (bvadd ?s8 ?x9) (bvadd ?s8 ?x0))))
(let ((?s10 (ite b10 (bvadd ?s9 ?x10) (bvadd ?s9 ?x0))))
(let ((?s11 (ite b11 (bvadd ?s10 ?x11) (bvadd ?s10 ?x0))))
(let ((?s12 (ite b12 (bvadd ?s11 ?x12) (bvadd ?s11 ?x0))))
(let ((?s13 (ite b13 (bvadd ?s12 ?x13) (bvadd ?s12 ?x0))))
(let ((?s14 (ite b14 (bvadd ?s13 ?x14) (bvadd ?s13 ?x0))))
(let ((?s15 (ite b15 (bvadd ?s14 ?x15) (bvadd ?s14 ?x0))))
(let ((?s16 (ite b16 (bvadd ?s15 ?x16) (bvadd ?s15 ?x0))))
(let ((?s17 (ite b17 (bvadd ?s16 ?x17) (bvadd ?s16 ?x0))))
(let ((?s18 (ite b18 (bvadd ?s17 ?x18) (bvadd ?s17 ?x0))))
(let ((?s19 (ite b19 (bvadd ?s18 ?x19) (bvadd ?s18 ?x0))))
(let ((?s20 (ite b20 (bvadd ?s19 ?x20) (bvadd ?s19 ?x0))))
(let ((?s21 (ite b21 (bvadd ?s20 ?x21) (bvadd ?s20 ?x0))))
(let ((?s22 (ite b22 (bvadd ?s21 ?x22) (bvadd ?s21 ?x0))))
(let ((?s23 (ite b23 (bvadd ?s22 ?x23) (bvadd ?s22 ?x0))))
(let ((?s24 (ite b24 (bvadd ?s23 ?x24) (bvadd ?s23 ?x0))))
(let ((?s25 (ite b25 (bvadd ?s24 ?x25) (bvadd ?s24 ?x0))))
(let ((?s26 (ite b26 (bvadd ?s25 ?x26) (bvadd ?s25 ?x0))))
(let ((?s27 (ite b27 (bvadd ?s26 ?x27) (bvadd ?s26 ?x0))))
(let ((?s28 (ite b28 (bvadd ?s27 ?x28) (bvadd ?s27 ?x0))))
(let ((?s29 (ite b29 (bvadd ?s28 ?x29) (bvadd ?s28 ?x0))))
(let ((?s30 (ite b30 (bvadd ?s29 ?x30) (bvadd ?s29 ?x0))))
(let ((?s31 (ite b31 (bvadd ?s30 ?x31) (bvadd ?s30 ?x0))))
(let ((?s32 (ite b32 (bvadd ?s31 ?x32) (bvadd ?s31 ?x0))))
(let ((?s33 (ite b33 (bvadd ?s32 ?x33) (bvadd ?s32 ?x0))))
(let ((?s34 (ite b34 (bvadd ?s33 ?x34) (bvadd ?s33 ?x0))))
(let ((?sum (ite b35 (bvadd ?s34 ?x35) (bvadd ?s34 ?x0))))
;(let ((?s36 (ite b36 (bvadd ?s35 ?x36) (bvadd ?s35 ?x0))))
;(let ((?s37 (ite b37 (bvadd ?s36 ?x37) (bvadd ?s36 ?x0))))
;(let ((?s38 (ite b38 (bvadd ?s37 ?x38) (bvadd ?s37 ?x0))))
;(let ((?s39 (ite b39 (bvadd ?s38 ?x39) (bvadd ?s38 ?x0))))
;(let ((?sum (ite b40 (bvadd ?s39 ?x40) (bvadd ?s39 ?x0))))
(let (($c (distinct ?sum (_ bv297232 32))))
(let (($nc (not $c)))
$nc
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)))))))))))))))
;)))))
(check-sat)
(get-model)
(exit)

